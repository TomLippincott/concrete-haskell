{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-missing-fields #-}
{-# OPTIONS_GHC -fno-warn-missing-signatures #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-----------------------------------------------------------------
-- Autogenerated by Thrift Compiler (0.10.0)                      --
--                                                             --
-- DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING --
-----------------------------------------------------------------

module SearchService_Client(search,getCapabilities,getCorpora) where
import Service_Client
import qualified Data.IORef as R
import Prelude (($), (.), (>>=), (==), (++))
import qualified Prelude as P
import qualified Control.Exception as X
import qualified Control.Monad as M ( liftM, ap, when )
import Data.Functor ( (<$>) )
import qualified Data.ByteString.Lazy as LBS
import qualified Data.Hashable as H
import qualified Data.Int as I
import qualified Data.Maybe as M (catMaybes)
import qualified Data.Text.Lazy.Encoding as E ( decodeUtf8, encodeUtf8 )
import qualified Data.Text.Lazy as LT
import qualified GHC.Generics as G (Generic)
import qualified Data.Typeable as TY ( Typeable )
import qualified Data.HashMap.Strict as Map
import qualified Data.HashSet as Set
import qualified Data.Vector as Vector
import qualified Test.QuickCheck.Arbitrary as QC ( Arbitrary(..) )
import qualified Test.QuickCheck as QC ( elements )

import qualified Thrift as T
import qualified Thrift.Types as T
import qualified Thrift.Arbitraries as T

import qualified Communication_Types
import qualified Services_Types
import qualified Structure_Types
import qualified Uuid_Types
import qualified Metadata_Types
import qualified Entities_Types


import Search_Types
import SearchService
seqid = R.newIORef 0
search (ip,op) arg_query = do
  send_search op arg_query
  recv_search ip
send_search op arg_query = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessageBegin op ("search", T.M_CALL, seqn)
  write_Search_args op (Search_args{search_args_query=arg_query})
  T.writeMessageEnd op
  T.tFlush (T.getTransport op)
recv_search ip = do
  (fname, mtype, rseqid) <- T.readMessageBegin ip
  M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; T.readMessageEnd ip ; X.throw exn }
  res <- read_Search_result ip
  T.readMessageEnd ip
  P.maybe (P.return ()) X.throw (search_result_ex res)
  P.return $ search_result_success res
getCapabilities (ip,op) = do
  send_getCapabilities op
  recv_getCapabilities ip
send_getCapabilities op = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessageBegin op ("getCapabilities", T.M_CALL, seqn)
  write_GetCapabilities_args op (GetCapabilities_args{})
  T.writeMessageEnd op
  T.tFlush (T.getTransport op)
recv_getCapabilities ip = do
  (fname, mtype, rseqid) <- T.readMessageBegin ip
  M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; T.readMessageEnd ip ; X.throw exn }
  res <- read_GetCapabilities_result ip
  T.readMessageEnd ip
  P.maybe (P.return ()) X.throw (getCapabilities_result_ex res)
  P.return $ getCapabilities_result_success res
getCorpora (ip,op) = do
  send_getCorpora op
  recv_getCorpora ip
send_getCorpora op = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessageBegin op ("getCorpora", T.M_CALL, seqn)
  write_GetCorpora_args op (GetCorpora_args{})
  T.writeMessageEnd op
  T.tFlush (T.getTransport op)
recv_getCorpora ip = do
  (fname, mtype, rseqid) <- T.readMessageBegin ip
  M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; T.readMessageEnd ip ; X.throw exn }
  res <- read_GetCorpora_result ip
  T.readMessageEnd ip
  P.maybe (P.return ()) X.throw (getCorpora_result_ex res)
  P.return $ getCorpora_result_success res
